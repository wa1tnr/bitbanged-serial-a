
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e38  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00004e38  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0001000c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0001000c  2**0
                  CONTENTS
  4 .bss          00000038  2000000c  00004e44  0001000c  2**2
                  ALLOC
  5 .stack        0000c004  20000044  00004e7c  0001000c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  7 .comment      0000007f  00000000  00000000  0001003a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000baac  00000000  00000000  000100b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001179  00000000  00000000  0001bb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eff  00000000  00000000  0001ccde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000360  00000000  00000000  0001dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000528  00000000  00000000  0001df3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002282  00000000  00000000  0001e465  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c90  00000000  00000000  000206e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000d27ba  00000000  00000000  00024377  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000970  00000000  00000000  000f6b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	48 c0 00 20 01 43 00 00 fd 42 00 00 fd 42 00 00     H.. .C...B...B..
    4010:	fd 42 00 00 fd 42 00 00 fd 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	fd 42 00 00 fd 42 00 00 00 00 00 00 fd 42 00 00     .B...B.......B..
    403c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    404c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    405c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    406c:	79 43 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     yC...B...B...B..
    407c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    408c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    409c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    40ac:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    40bc:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    40cc:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    40dc:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    40ec:	fd 42 00 00 00 00 00 00 a5 42 00 00 fd 42 00 00     .B.......B...B..
    40fc:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    410c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    411c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    412c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    413c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    414c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 00 00 00 00     .B...B...B......
	...
    4180:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    4190:	00 00 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .....B...B...B..
    41a0:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    41b0:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    41c0:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    41d0:	fd 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .B..............
	...
    41ec:	b1 43 00 00 c1 43 00 00 fd 42 00 00 fd 42 00 00     .C...C...B...B..
	...
    420c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    421c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    422c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    423c:	fd 42 00 00 00 00 00 00 fd 42 00 00 fd 42 00 00     .B.......B...B..
    424c:	fd 42 00 00 fd 42 00 00 fd 42 00 00 fd 42 00 00     .B...B...B...B..
    425c:	fd 42 00 00 00 00 00 00                             .B......

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	2000000c 	.word	0x2000000c
    4280:	00000000 	.word	0x00000000
    4284:	00004e38 	.word	0x00004e38

00004288 <frame_dummy>:
    4288:	b508      	push	{r3, lr}
    428a:	4b03      	ldr	r3, [pc, #12]	; (4298 <frame_dummy+0x10>)
    428c:	b11b      	cbz	r3, 4296 <frame_dummy+0xe>
    428e:	4903      	ldr	r1, [pc, #12]	; (429c <frame_dummy+0x14>)
    4290:	4803      	ldr	r0, [pc, #12]	; (42a0 <frame_dummy+0x18>)
    4292:	f3af 8000 	nop.w
    4296:	bd08      	pop	{r3, pc}
    4298:	00000000 	.word	0x00000000
    429c:	20000010 	.word	0x20000010
    42a0:	00004e38 	.word	0x00004e38

000042a4 <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    42a4:	4a0b      	ldr	r2, [pc, #44]	; (42d4 <RAMECC_Handler+0x30>)
    42a6:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    42a8:	b082      	sub	sp, #8
    42aa:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    42ac:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    42ae:	9b01      	ldr	r3, [sp, #4]
    42b0:	0799      	lsls	r1, r3, #30
    42b2:	d505      	bpl.n	42c0 <RAMECC_Handler+0x1c>
    42b4:	4b08      	ldr	r3, [pc, #32]	; (42d8 <RAMECC_Handler+0x34>)
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	b113      	cbz	r3, 42c0 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    42ba:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    42bc:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    42be:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    42c0:	9b01      	ldr	r3, [sp, #4]
    42c2:	07db      	lsls	r3, r3, #31
    42c4:	d504      	bpl.n	42d0 <RAMECC_Handler+0x2c>
    42c6:	4b04      	ldr	r3, [pc, #16]	; (42d8 <RAMECC_Handler+0x34>)
    42c8:	685b      	ldr	r3, [r3, #4]
    42ca:	b10b      	cbz	r3, 42d0 <RAMECC_Handler+0x2c>
    42cc:	4a01      	ldr	r2, [pc, #4]	; (42d4 <RAMECC_Handler+0x30>)
    42ce:	e7f4      	b.n	42ba <RAMECC_Handler+0x16>
}
    42d0:	b002      	add	sp, #8
    42d2:	4770      	bx	lr
    42d4:	41020000 	.word	0x41020000
    42d8:	20000034 	.word	0x20000034

000042dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    42dc:	4b01      	ldr	r3, [pc, #4]	; (42e4 <SystemInit+0x8>)
    42de:	4a02      	ldr	r2, [pc, #8]	; (42e8 <SystemInit+0xc>)
    42e0:	601a      	str	r2, [r3, #0]
	return;
}
    42e2:	4770      	bx	lr
    42e4:	20000000 	.word	0x20000000
    42e8:	02dc6c00 	.word	0x02dc6c00

000042ec <SystemCoreClockUpdate>:
    42ec:	4b01      	ldr	r3, [pc, #4]	; (42f4 <SystemCoreClockUpdate+0x8>)
    42ee:	4a02      	ldr	r2, [pc, #8]	; (42f8 <SystemCoreClockUpdate+0xc>)
    42f0:	601a      	str	r2, [r3, #0]
    42f2:	4770      	bx	lr
    42f4:	20000000 	.word	0x20000000
    42f8:	02dc6c00 	.word	0x02dc6c00

000042fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42fc:	e7fe      	b.n	42fc <Dummy_Handler>
	...

00004300 <Reset_Handler>:
{
    4300:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
    4302:	4a14      	ldr	r2, [pc, #80]	; (4354 <Reset_Handler+0x54>)
    4304:	4b14      	ldr	r3, [pc, #80]	; (4358 <Reset_Handler+0x58>)
    4306:	429a      	cmp	r2, r3
    4308:	d003      	beq.n	4312 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    430a:	4914      	ldr	r1, [pc, #80]	; (435c <Reset_Handler+0x5c>)
    430c:	3a04      	subs	r2, #4
    430e:	428b      	cmp	r3, r1
    4310:	d318      	bcc.n	4344 <Reset_Handler+0x44>
{
    4312:	4b13      	ldr	r3, [pc, #76]	; (4360 <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
    4314:	4a13      	ldr	r2, [pc, #76]	; (4364 <Reset_Handler+0x64>)
		*pDest++ = 0;
    4316:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
    4318:	4293      	cmp	r3, r2
    431a:	d318      	bcc.n	434e <Reset_Handler+0x4e>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    431c:	4a12      	ldr	r2, [pc, #72]	; (4368 <Reset_Handler+0x68>)
    431e:	4b13      	ldr	r3, [pc, #76]	; (436c <Reset_Handler+0x6c>)
    4320:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4324:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
    4326:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    432a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    432e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4332:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4336:	f3bf 8f6f 	isb	sy
	__libc_init_array();
    433a:	4b0d      	ldr	r3, [pc, #52]	; (4370 <Reset_Handler+0x70>)
    433c:	4798      	blx	r3
	main();
    433e:	4b0d      	ldr	r3, [pc, #52]	; (4374 <Reset_Handler+0x74>)
    4340:	4798      	blx	r3
    4342:	e7fe      	b.n	4342 <Reset_Handler+0x42>
			*pDest++ = *pSrc++;
    4344:	f852 0f04 	ldr.w	r0, [r2, #4]!
    4348:	f843 0b04 	str.w	r0, [r3], #4
    434c:	e7df      	b.n	430e <Reset_Handler+0xe>
		*pDest++ = 0;
    434e:	f843 1b04 	str.w	r1, [r3], #4
    4352:	e7e1      	b.n	4318 <Reset_Handler+0x18>
    4354:	00004e38 	.word	0x00004e38
    4358:	20000000 	.word	0x20000000
    435c:	2000000c 	.word	0x2000000c
    4360:	2000000c 	.word	0x2000000c
    4364:	20000044 	.word	0x20000044
    4368:	00004000 	.word	0x00004000
    436c:	e000ed00 	.word	0xe000ed00
    4370:	00004dd1 	.word	0x00004dd1
    4374:	00004c35 	.word	0x00004c35

00004378 <RTC_Handler>:
/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
	_rtc_timer_interrupt_handler(_rtc_dev);
    4378:	4b07      	ldr	r3, [pc, #28]	; (4398 <RTC_Handler+0x20>)
{
    437a:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    437c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    437e:	68e3      	ldr	r3, [r4, #12]
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    4380:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    4382:	05db      	lsls	r3, r3, #23
    4384:	d507      	bpl.n	4396 <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    4386:	6823      	ldr	r3, [r4, #0]
    4388:	b10b      	cbz	r3, 438e <RTC_Handler+0x16>
			dev->timer_cb.period_expired(dev);
    438a:	4620      	mov	r0, r4
    438c:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    438e:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    4390:	f44f 7280 	mov.w	r2, #256	; 0x100
    4394:	819a      	strh	r2, [r3, #12]
}
    4396:	bd10      	pop	{r4, pc}
    4398:	20000028 	.word	0x20000028

0000439c <tc_interrupt_handler>:
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
	void *const hw = device->hw;
    439c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    439e:	7a91      	ldrb	r1, [r2, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    43a0:	07c9      	lsls	r1, r1, #31
    43a2:	d503      	bpl.n	43ac <tc_interrupt_handler+0x10>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    43a4:	2101      	movs	r1, #1
    43a6:	7291      	strb	r1, [r2, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    43a8:	6803      	ldr	r3, [r0, #0]
    43aa:	4718      	bx	r3
	}
}
    43ac:	4770      	bx	lr
	...

000043b0 <TC0_Handler>:
/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
	tc_interrupt_handler(_tc0_dev);
    43b0:	4b01      	ldr	r3, [pc, #4]	; (43b8 <TC0_Handler+0x8>)
    43b2:	6818      	ldr	r0, [r3, #0]
    43b4:	4b01      	ldr	r3, [pc, #4]	; (43bc <TC0_Handler+0xc>)
    43b6:	4718      	bx	r3
    43b8:	2000002c 	.word	0x2000002c
    43bc:	0000439d 	.word	0x0000439d

000043c0 <TC1_Handler>:
/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
	tc_interrupt_handler(_tc1_dev);
    43c0:	4b01      	ldr	r3, [pc, #4]	; (43c8 <TC1_Handler+0x8>)
    43c2:	6858      	ldr	r0, [r3, #4]
    43c4:	4b01      	ldr	r3, [pc, #4]	; (43cc <TC1_Handler+0xc>)
    43c6:	4718      	bx	r3
    43c8:	2000002c 	.word	0x2000002c
    43cc:	0000439d 	.word	0x0000439d

000043d0 <pins_setup>:


// https://www.avrfreaks.net/forum/resolved-samd51-asf4start-clock-fail-debugger-hang

void pins_setup(void) {
    PORT->Group[0].DIRSET.reg  = (uint32_t)(1 << 21); // PA21 //  1 11 pinmode  // D11
    43d0:	4b05      	ldr	r3, [pc, #20]	; (43e8 <pins_setup+0x18>)
    43d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    43d6:	609a      	str	r2, [r3, #8]
    PORT->Group[0].DIRSET.reg  = (uint32_t)(1 << 22); // PA22 //  1 13 pinmode  // D13
    43d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    43dc:	609a      	str	r2, [r3, #8]
    PORT->Group[0].DIRSET.reg  = (uint32_t)(1 << 17); // PA17 //  1  1 pinmode  // TX aka D1
    43de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    43e2:	609a      	str	r2, [r3, #8]
}
    43e4:	4770      	bx	lr
    43e6:	bf00      	nop
    43e8:	41008000 	.word	0x41008000

000043ec <pip_space>:
// really satisfying when it comes in - 26 works at 115200.

// HAVE SERIAL OUTPUT for ATSAMD51G19A ItsyBitsyM4 - nice.  01 NOV 2020 @17:50 UTC
#define SECU 26

void pip_space(void) {
    43ec:	b082      	sub	sp, #8
// no gap between successive 'pulses' of the same value (GND or 3.3)
// so you just turn on (or off) the pin, and allow a timer to expire
// that has counted out the time interval for that many pulses (of
// 26 uSec duration, per, or thereabouts).

    for (volatile int j = SECU; j>0; j--) {
    43ee:	231a      	movs	r3, #26
    43f0:	9301      	str	r3, [sp, #4]
    43f2:	9b01      	ldr	r3, [sp, #4]
    43f4:	2b00      	cmp	r3, #0
    43f6:	dc01      	bgt.n	43fc <pip_space+0x10>
    }
}
    43f8:	b002      	add	sp, #8
    43fa:	4770      	bx	lr
    for (volatile int j = SECU; j>0; j--) {
    43fc:	9b01      	ldr	r3, [sp, #4]
    43fe:	3b01      	subs	r3, #1
    4400:	e7f6      	b.n	43f0 <pip_space+0x4>
	...

00004404 <send_vy_nothing>:


void send_vy_nothing(void) { // time gap
    4404:	b507      	push	{r0, r1, r2, lr}
    for (volatile int p=35;p>0; p--) {
    4406:	2323      	movs	r3, #35	; 0x23
        pip_space(); // delay 26 uSec
    4408:	4a06      	ldr	r2, [pc, #24]	; (4424 <send_vy_nothing+0x20>)
    for (volatile int p=35;p>0; p--) {
    440a:	9301      	str	r3, [sp, #4]
    440c:	9b01      	ldr	r3, [sp, #4]
    440e:	2b00      	cmp	r3, #0
    4410:	dc02      	bgt.n	4418 <send_vy_nothing+0x14>
    }
}
    4412:	b003      	add	sp, #12
    4414:	f85d fb04 	ldr.w	pc, [sp], #4
        pip_space(); // delay 26 uSec
    4418:	4790      	blx	r2
    for (volatile int p=35;p>0; p--) {
    441a:	9b01      	ldr	r3, [sp, #4]
    441c:	3b01      	subs	r3, #1
    441e:	9301      	str	r3, [sp, #4]
    4420:	e7f4      	b.n	440c <send_vy_nothing+0x8>
    4422:	bf00      	nop
    4424:	000043ed 	.word	0x000043ed

00004428 <send_sm_nothing>:

void send_sm_nothing(void) { // time gap
    4428:	b507      	push	{r0, r1, r2, lr}
    for (volatile int p=335;p>0; p--) {
    442a:	f240 134f 	movw	r3, #335	; 0x14f
        pip_space(); // delay 26 uSec
    442e:	4a06      	ldr	r2, [pc, #24]	; (4448 <send_sm_nothing+0x20>)
    for (volatile int p=335;p>0; p--) {
    4430:	9301      	str	r3, [sp, #4]
    4432:	9b01      	ldr	r3, [sp, #4]
    4434:	2b00      	cmp	r3, #0
    4436:	dc02      	bgt.n	443e <send_sm_nothing+0x16>
    }
}
    4438:	b003      	add	sp, #12
    443a:	f85d fb04 	ldr.w	pc, [sp], #4
        pip_space(); // delay 26 uSec
    443e:	4790      	blx	r2
    for (volatile int p=335;p>0; p--) {
    4440:	9b01      	ldr	r3, [sp, #4]
    4442:	3b01      	subs	r3, #1
    4444:	9301      	str	r3, [sp, #4]
    4446:	e7f4      	b.n	4432 <send_sm_nothing+0xa>
    4448:	000043ed 	.word	0x000043ed

0000444c <send_nothing>:

void send_nothing(void) { // time gap
    444c:	b507      	push	{r0, r1, r2, lr}
    for (volatile int p=3355;p>0; p--) {
    444e:	f640 531b 	movw	r3, #3355	; 0xd1b
        pip_space(); // delay 26 uSec
    4452:	4a06      	ldr	r2, [pc, #24]	; (446c <send_nothing+0x20>)
    for (volatile int p=3355;p>0; p--) {
    4454:	9301      	str	r3, [sp, #4]
    4456:	9b01      	ldr	r3, [sp, #4]
    4458:	2b00      	cmp	r3, #0
    445a:	dc02      	bgt.n	4462 <send_nothing+0x16>
    }
}
    445c:	b003      	add	sp, #12
    445e:	f85d fb04 	ldr.w	pc, [sp], #4
        pip_space(); // delay 26 uSec
    4462:	4790      	blx	r2
    for (volatile int p=3355;p>0; p--) {
    4464:	9b01      	ldr	r3, [sp, #4]
    4466:	3b01      	subs	r3, #1
    4468:	9301      	str	r3, [sp, #4]
    446a:	e7f4      	b.n	4456 <send_nothing+0xa>
    446c:	000043ed 	.word	0x000043ed

00004470 <common_end>:

void common_end(void) {

    // post-amble hi hi

    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    4470:	4a07      	ldr	r2, [pc, #28]	; (4490 <common_end+0x20>)
    pip_space(); // delay 26 uSec
    4472:	4908      	ldr	r1, [pc, #32]	; (4494 <common_end+0x24>)
    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    4474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
void common_end(void) {
    4478:	b510      	push	{r4, lr}
    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    447a:	6153      	str	r3, [r2, #20]
    pip_space(); // delay 26 uSec
    447c:	4788      	blx	r1
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1  1 pinwrite
    447e:	6993      	ldr	r3, [r2, #24]
    4480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4484:	6193      	str	r3, [r2, #24]
    // now a very wide space
    pip_space(); // delay 26 uSec
    4486:	4788      	blx	r1
    send_vy_nothing(); // // time gap
    4488:	4b03      	ldr	r3, [pc, #12]	; (4498 <common_end+0x28>)
    // send_nothing(); // guard time
}
    448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_vy_nothing(); // // time gap
    448e:	4718      	bx	r3
    4490:	41008000 	.word	0x41008000
    4494:	000043ed 	.word	0x000043ed
    4498:	00004405 	.word	0x00004405

0000449c <bit_CLR>:

void bit_CLR(void) { // send the bit cleared - ground the GPIO pin
    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    449c:	4b02      	ldr	r3, [pc, #8]	; (44a8 <bit_CLR+0xc>)
    449e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    44a2:	615a      	str	r2, [r3, #20]
    pip_space(); // delay 26 uSec
    44a4:	4b01      	ldr	r3, [pc, #4]	; (44ac <bit_CLR+0x10>)
    44a6:	4718      	bx	r3
    44a8:	41008000 	.word	0x41008000
    44ac:	000043ed 	.word	0x000043ed

000044b0 <bit_SET>:
}
void bit_SET(void) { // send the bit set - raise the GPIO pin to 3.3 VDC
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1  1 pinwrite
    44b0:	4a03      	ldr	r2, [pc, #12]	; (44c0 <bit_SET+0x10>)
    44b2:	6993      	ldr	r3, [r2, #24]
    44b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    44b8:	6193      	str	r3, [r2, #24]
    pip_space(); // delay 26 uSec
    44ba:	4b02      	ldr	r3, [pc, #8]	; (44c4 <bit_SET+0x14>)
    44bc:	4718      	bx	r3
    44be:	bf00      	nop
    44c0:	41008000 	.word	0x41008000
    44c4:	000043ed 	.word	0x000043ed

000044c8 <send_preamble>:
}


void send_preamble(void) {
    44c8:	b510      	push	{r4, lr}
    // preamble

    // send_nothing(); // guard time
    // send_sm_nothing(); // // time gap
    send_vy_nothing(); // // time gap
    44ca:	4b04      	ldr	r3, [pc, #16]	; (44dc <send_preamble+0x14>)
    44cc:	4798      	blx	r3
    pip_space(); // delay 26 uSec
    44ce:	4b04      	ldr	r3, [pc, #16]	; (44e0 <send_preamble+0x18>)
    44d0:	4798      	blx	r3
    bit_CLR();
    44d2:	4b04      	ldr	r3, [pc, #16]	; (44e4 <send_preamble+0x1c>)
    // preamble ends.
}
    44d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bit_CLR();
    44d8:	4718      	bx	r3
    44da:	bf00      	nop
    44dc:	00004405 	.word	0x00004405
    44e0:	000043ed 	.word	0x000043ed
    44e4:	0000449d 	.word	0x0000449d

000044e8 <send_bravo>:
}


// ###bookmark
// ###bookmark
void send_bravo(void) { // 01 0000 1
    44e8:	b510      	push	{r4, lr}

    send_preamble();
    44ea:	4b07      	ldr	r3, [pc, #28]	; (4508 <send_bravo+0x20>)
    44ec:	4798      	blx	r3
    bit_CLR(); bit_SET();
    44ee:	4907      	ldr	r1, [pc, #28]	; (450c <send_bravo+0x24>)
    44f0:	4788      	blx	r1
    44f2:	4807      	ldr	r0, [pc, #28]	; (4510 <send_bravo+0x28>)
    44f4:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR(); bit_CLR();
    44f6:	4788      	blx	r1
    44f8:	4788      	blx	r1
    44fa:	4788      	blx	r1
    44fc:	4788      	blx	r1
    bit_SET();
    44fe:	4780      	blx	r0
    common_end();
    4500:	4b04      	ldr	r3, [pc, #16]	; (4514 <send_bravo+0x2c>)
}
    4502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4506:	4718      	bx	r3
    4508:	000044c9 	.word	0x000044c9
    450c:	0000449d 	.word	0x0000449d
    4510:	000044b1 	.word	0x000044b1
    4514:	00004471 	.word	0x00004471

00004518 <send_foxtrot>:

void send_foxtrot(void) { // 01 1000 1
    4518:	b510      	push	{r4, lr}

    send_preamble();
    451a:	4b07      	ldr	r3, [pc, #28]	; (4538 <send_foxtrot+0x20>)
    451c:	4798      	blx	r3
    bit_CLR(); bit_SET();
    451e:	4907      	ldr	r1, [pc, #28]	; (453c <send_foxtrot+0x24>)
    4520:	4788      	blx	r1
    4522:	4807      	ldr	r0, [pc, #28]	; (4540 <send_foxtrot+0x28>)
    4524:	4780      	blx	r0
    bit_SET();
    4526:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR();
    4528:	4788      	blx	r1
    452a:	4788      	blx	r1
    452c:	4788      	blx	r1
    bit_SET();
    452e:	4780      	blx	r0
    common_end();
    4530:	4b04      	ldr	r3, [pc, #16]	; (4544 <send_foxtrot+0x2c>)
}
    4532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4536:	4718      	bx	r3
    4538:	000044c9 	.word	0x000044c9
    453c:	0000449d 	.word	0x0000449d
    4540:	000044b1 	.word	0x000044b1
    4544:	00004471 	.word	0x00004471

00004548 <send_delta>:

void send_delta(void) { // 00 1000 1
    4548:	b510      	push	{r4, lr}

    send_preamble();
    454a:	4b07      	ldr	r3, [pc, #28]	; (4568 <send_delta+0x20>)
    454c:	4798      	blx	r3
    bit_CLR(); bit_CLR();
    454e:	4907      	ldr	r1, [pc, #28]	; (456c <send_delta+0x24>)
    4550:	4788      	blx	r1
    4552:	4788      	blx	r1
    bit_SET();
    4554:	4806      	ldr	r0, [pc, #24]	; (4570 <send_delta+0x28>)
    4556:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR();
    4558:	4788      	blx	r1
    455a:	4788      	blx	r1
    455c:	4788      	blx	r1
    bit_SET();
    455e:	4780      	blx	r0
    common_end();
    4560:	4b04      	ldr	r3, [pc, #16]	; (4574 <send_delta+0x2c>)
}
    4562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4566:	4718      	bx	r3
    4568:	000044c9 	.word	0x000044c9
    456c:	0000449d 	.word	0x0000449d
    4570:	000044b1 	.word	0x000044b1
    4574:	00004471 	.word	0x00004471

00004578 <send_echo>:

void send_echo(void) { // 01 1000 1
    4578:	b510      	push	{r4, lr}
   //  new            echo:     101 000 1

    send_preamble();
    457a:	4b07      	ldr	r3, [pc, #28]	; (4598 <send_echo+0x20>)
    457c:	4798      	blx	r3
    bit_SET(); bit_CLR(); bit_SET();
    457e:	4807      	ldr	r0, [pc, #28]	; (459c <send_echo+0x24>)
    4580:	4780      	blx	r0
    4582:	4907      	ldr	r1, [pc, #28]	; (45a0 <send_echo+0x28>)
    4584:	4788      	blx	r1
    4586:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR();
    4588:	4788      	blx	r1
    458a:	4788      	blx	r1
    458c:	4788      	blx	r1
    bit_SET();
    458e:	4780      	blx	r0
    common_end();
    4590:	4b04      	ldr	r3, [pc, #16]	; (45a4 <send_echo+0x2c>)
}
    4592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4596:	4718      	bx	r3
    4598:	000044c9 	.word	0x000044c9
    459c:	000044b1 	.word	0x000044b1
    45a0:	0000449d 	.word	0x0000449d
    45a4:	00004471 	.word	0x00004471

000045a8 <send_charley>:

void send_charley(void) { // 11 0000 1
    45a8:	b510      	push	{r4, lr}
    send_preamble();
    45aa:	4b07      	ldr	r3, [pc, #28]	; (45c8 <send_charley+0x20>)
    45ac:	4798      	blx	r3
    bit_SET(); bit_SET();
    45ae:	4807      	ldr	r0, [pc, #28]	; (45cc <send_charley+0x24>)
    45b0:	4780      	blx	r0
    45b2:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR(); bit_CLR(); 
    45b4:	4906      	ldr	r1, [pc, #24]	; (45d0 <send_charley+0x28>)
    45b6:	4788      	blx	r1
    45b8:	4788      	blx	r1
    45ba:	4788      	blx	r1
    45bc:	4788      	blx	r1
    bit_SET();
    45be:	4780      	blx	r0
    common_end();
    45c0:	4b04      	ldr	r3, [pc, #16]	; (45d4 <send_charley+0x2c>)
}
    45c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    45c6:	4718      	bx	r3
    45c8:	000044c9 	.word	0x000044c9
    45cc:	000044b1 	.word	0x000044b1
    45d0:	0000449d 	.word	0x0000449d
    45d4:	00004471 	.word	0x00004471

000045d8 <send_golf>:


// ###bookmark 
// ###bookmark

void send_golf(void) { // 111 000 1
    45d8:	b510      	push	{r4, lr}

    send_preamble();
    45da:	4b07      	ldr	r3, [pc, #28]	; (45f8 <send_golf+0x20>)
    45dc:	4798      	blx	r3
    bit_SET(); bit_SET(); bit_SET();
    45de:	4907      	ldr	r1, [pc, #28]	; (45fc <send_golf+0x24>)
    45e0:	4788      	blx	r1
    45e2:	4788      	blx	r1
    45e4:	4788      	blx	r1
    bit_CLR(); bit_CLR(); bit_CLR();
    45e6:	4806      	ldr	r0, [pc, #24]	; (4600 <send_golf+0x28>)
    45e8:	4780      	blx	r0
    45ea:	4780      	blx	r0
    45ec:	4780      	blx	r0
    bit_SET();
    45ee:	4788      	blx	r1
    common_end();
    45f0:	4b04      	ldr	r3, [pc, #16]	; (4604 <send_golf+0x2c>)
}
    45f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    45f6:	4718      	bx	r3
    45f8:	000044c9 	.word	0x000044c9
    45fc:	000044b1 	.word	0x000044b1
    4600:	0000449d 	.word	0x0000449d
    4604:	00004471 	.word	0x00004471

00004608 <send_three>:


void send_three(void) { // zero then double alt  11 00 11 0
    4608:	b510      	push	{r4, lr}
    send_preamble();
    460a:	4b07      	ldr	r3, [pc, #28]	; (4628 <send_three+0x20>)
    460c:	4798      	blx	r3
    bit_SET(); bit_SET();
    460e:	4907      	ldr	r1, [pc, #28]	; (462c <send_three+0x24>)
    4610:	4788      	blx	r1
    4612:	4788      	blx	r1
    bit_CLR(); bit_CLR();
    4614:	4806      	ldr	r0, [pc, #24]	; (4630 <send_three+0x28>)
    4616:	4780      	blx	r0
    4618:	4780      	blx	r0
    bit_SET(); bit_SET();
    461a:	4788      	blx	r1
    461c:	4788      	blx	r1
    bit_CLR();
    461e:	4780      	blx	r0
    common_end();
    4620:	4b04      	ldr	r3, [pc, #16]	; (4634 <send_three+0x2c>)
}
    4622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4626:	4718      	bx	r3
    4628:	000044c9 	.word	0x000044c9
    462c:	000044b1 	.word	0x000044b1
    4630:	0000449d 	.word	0x0000449d
    4634:	00004471 	.word	0x00004471

00004638 <send_two>:

void send_two(void) { // like three: 01 00 11 0
    4638:	b510      	push	{r4, lr}
    send_preamble();
    463a:	4b07      	ldr	r3, [pc, #28]	; (4658 <send_two+0x20>)
    463c:	4798      	blx	r3
    bit_CLR(); bit_SET();
    463e:	4907      	ldr	r1, [pc, #28]	; (465c <send_two+0x24>)
    4640:	4788      	blx	r1
    4642:	4807      	ldr	r0, [pc, #28]	; (4660 <send_two+0x28>)
    4644:	4780      	blx	r0
    bit_CLR(); bit_CLR();
    4646:	4788      	blx	r1
    4648:	4788      	blx	r1
    bit_SET(); bit_SET();
    464a:	4780      	blx	r0
    464c:	4780      	blx	r0
    bit_CLR();
    464e:	4788      	blx	r1
    common_end();
    4650:	4b04      	ldr	r3, [pc, #16]	; (4664 <send_two+0x2c>)
}
    4652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4656:	4718      	bx	r3
    4658:	000044c9 	.word	0x000044c9
    465c:	0000449d 	.word	0x0000449d
    4660:	000044b1 	.word	0x000044b1
    4664:	00004471 	.word	0x00004471

00004668 <send_lf>:


void send_lf(void) { // 0101000
    4668:	b510      	push	{r4, lr}
    send_preamble();
    466a:	4b07      	ldr	r3, [pc, #28]	; (4688 <send_lf+0x20>)
    466c:	4798      	blx	r3
    bit_CLR(); bit_SET();
    466e:	4907      	ldr	r1, [pc, #28]	; (468c <send_lf+0x24>)
    4670:	4788      	blx	r1
    4672:	4807      	ldr	r0, [pc, #28]	; (4690 <send_lf+0x28>)
    4674:	4780      	blx	r0
    bit_CLR(); bit_SET();
    4676:	4788      	blx	r1
    4678:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR();
    467a:	4788      	blx	r1
    467c:	4788      	blx	r1
    467e:	4788      	blx	r1
    common_end();
    4680:	4b04      	ldr	r3, [pc, #16]	; (4694 <send_lf+0x2c>)
}
    4682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4686:	4718      	bx	r3
    4688:	000044c9 	.word	0x000044c9
    468c:	0000449d 	.word	0x0000449d
    4690:	000044b1 	.word	0x000044b1
    4694:	00004471 	.word	0x00004471

00004698 <send_cr>:

void send_cr(void) { // 1011000
    4698:	b510      	push	{r4, lr}
    send_preamble();
    469a:	4b07      	ldr	r3, [pc, #28]	; (46b8 <send_cr+0x20>)
    469c:	4798      	blx	r3
    bit_SET();
    469e:	4807      	ldr	r0, [pc, #28]	; (46bc <send_cr+0x24>)
    46a0:	4780      	blx	r0
    bit_CLR();
    46a2:	4907      	ldr	r1, [pc, #28]	; (46c0 <send_cr+0x28>)
    46a4:	4788      	blx	r1
    bit_SET(); bit_SET();
    46a6:	4780      	blx	r0
    46a8:	4780      	blx	r0
    bit_CLR(); bit_CLR(); bit_CLR();
    46aa:	4788      	blx	r1
    46ac:	4788      	blx	r1
    46ae:	4788      	blx	r1
    common_end();
    46b0:	4b04      	ldr	r3, [pc, #16]	; (46c4 <send_cr+0x2c>)
}
    46b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    46b6:	4718      	bx	r3
    46b8:	000044c9 	.word	0x000044c9
    46bc:	000044b1 	.word	0x000044b1
    46c0:	0000449d 	.word	0x0000449d
    46c4:	00004471 	.word	0x00004471

000046c8 <send_crlf>:

void send_crlf(void) {
    46c8:	b510      	push	{r4, lr}
    send_cr();
    46ca:	4b03      	ldr	r3, [pc, #12]	; (46d8 <send_crlf+0x10>)
    46cc:	4798      	blx	r3
    send_lf();
    46ce:	4b03      	ldr	r3, [pc, #12]	; (46dc <send_crlf+0x14>)
}
    46d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_lf();
    46d4:	4718      	bx	r3
    46d6:	bf00      	nop
    46d8:	00004699 	.word	0x00004699
    46dc:	00004669 	.word	0x00004669

000046e0 <send_space>:

void send_space(void) { // ascii 32 0x20 delimiter
    46e0:	b510      	push	{r4, lr}
    // preamble

    send_nothing(); // guard time
    46e2:	4b09      	ldr	r3, [pc, #36]	; (4708 <send_space+0x28>)
    46e4:	4798      	blx	r3
    pip_space(); // delay 26 uSec
    46e6:	4b09      	ldr	r3, [pc, #36]	; (470c <send_space+0x2c>)
    46e8:	4798      	blx	r3

    bit_CLR();
    46ea:	4909      	ldr	r1, [pc, #36]	; (4710 <send_space+0x30>)
    46ec:	4788      	blx	r1

    // preamble ends.


    // send 2^0 bit:
    bit_CLR();
    46ee:	4788      	blx	r1

    // send 2^1 bit:
    bit_CLR();
    46f0:	4788      	blx	r1

    // send 2^2 bit:
    bit_CLR();
    46f2:	4788      	blx	r1

    // send 2^3 bit:
    bit_CLR();
    46f4:	4788      	blx	r1

    // send 2^4 bit:
    bit_CLR();
    46f6:	4788      	blx	r1

    // send 2^5 bit:
    bit_SET();
    46f8:	4b06      	ldr	r3, [pc, #24]	; (4714 <send_space+0x34>)
    46fa:	4798      	blx	r3

    // send 2^6 bit:
    bit_CLR();
    46fc:	4788      	blx	r1

    // post-amble hi hi

    common_end();
    46fe:	4b06      	ldr	r3, [pc, #24]	; (4718 <send_space+0x38>)
}
    4700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4704:	4718      	bx	r3
    4706:	bf00      	nop
    4708:	0000444d 	.word	0x0000444d
    470c:	000043ed 	.word	0x000043ed
    4710:	0000449d 	.word	0x0000449d
    4714:	000044b1 	.word	0x000044b1
    4718:	00004471 	.word	0x00004471

0000471c <send_gap>:


void send_gap(void) { 
    471c:	b510      	push	{r4, lr}
    send_sm_nothing();
    471e:	4b03      	ldr	r3, [pc, #12]	; (472c <send_gap+0x10>)
    4720:	4798      	blx	r3
    send_space();    // character delimiter: whitespace
    4722:	4b03      	ldr	r3, [pc, #12]	; (4730 <send_gap+0x14>)
}
    4724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_space();    // character delimiter: whitespace
    4728:	4718      	bx	r3
    472a:	bf00      	nop
    472c:	00004429 	.word	0x00004429
    4730:	000046e1 	.word	0x000046e1

00004734 <send_gapp>:

void send_gapp(void) { // send the gap between character groups
    4734:	b510      	push	{r4, lr}
    send_nothing();  // large inter-char time delay
    4736:	4b03      	ldr	r3, [pc, #12]	; (4744 <send_gapp+0x10>)
    4738:	4798      	blx	r3
    send_space();    // character delimiter: whitespace
    473a:	4b03      	ldr	r3, [pc, #12]	; (4748 <send_gapp+0x14>)
}
    473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_space();    // character delimiter: whitespace
    4740:	4718      	bx	r3
    4742:	bf00      	nop
    4744:	0000444d 	.word	0x0000444d
    4748:	000046e1 	.word	0x000046e1

0000474c <send_gapspace>:


void send_gapspace(void) {
    474c:	b510      	push	{r4, lr}
    send_gap();
    474e:	4803      	ldr	r0, [pc, #12]	; (475c <send_gapspace+0x10>)
    4750:	4780      	blx	r0
    send_space();
    4752:	4b03      	ldr	r3, [pc, #12]	; (4760 <send_gapspace+0x14>)
    4754:	4798      	blx	r3
    send_gap();
}
    4756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_gap();
    475a:	4700      	bx	r0
    475c:	0000471d 	.word	0x0000471d
    4760:	000046e1 	.word	0x000046e1

00004764 <send_zero>:
    send_gapspace();
    send_lf();
    send_gapspace();
}

void send_zero(void) { // 0000110
    4764:	b510      	push	{r4, lr}
    send_preamble();
    4766:	4b07      	ldr	r3, [pc, #28]	; (4784 <send_zero+0x20>)
    4768:	4798      	blx	r3
    bit_CLR(); bit_CLR(); bit_CLR(); bit_CLR();
    476a:	4907      	ldr	r1, [pc, #28]	; (4788 <send_zero+0x24>)
    476c:	4788      	blx	r1
    476e:	4788      	blx	r1
    4770:	4788      	blx	r1
    4772:	4788      	blx	r1
    bit_SET(); bit_SET();
    4774:	4805      	ldr	r0, [pc, #20]	; (478c <send_zero+0x28>)
    4776:	4780      	blx	r0
    4778:	4780      	blx	r0
    bit_CLR();
    477a:	4788      	blx	r1
    common_end();
    477c:	4b04      	ldr	r3, [pc, #16]	; (4790 <send_zero+0x2c>)
}
    477e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4782:	4718      	bx	r3
    4784:	000044c9 	.word	0x000044c9
    4788:	0000449d 	.word	0x0000449d
    478c:	000044b1 	.word	0x000044b1
    4790:	00004471 	.word	0x00004471

00004794 <send_nine>:

void send_nine(void) { // 1 00 111 0
    4794:	b510      	push	{r4, lr}
    send_preamble();
    4796:	4b07      	ldr	r3, [pc, #28]	; (47b4 <send_nine+0x20>)
    4798:	4798      	blx	r3
    bit_SET();
    479a:	4907      	ldr	r1, [pc, #28]	; (47b8 <send_nine+0x24>)
    479c:	4788      	blx	r1
    bit_CLR(); bit_CLR();
    479e:	4807      	ldr	r0, [pc, #28]	; (47bc <send_nine+0x28>)
    47a0:	4780      	blx	r0
    47a2:	4780      	blx	r0
    bit_SET(); bit_SET(); bit_SET();
    47a4:	4788      	blx	r1
    47a6:	4788      	blx	r1
    47a8:	4788      	blx	r1
    bit_CLR();
    47aa:	4780      	blx	r0
    common_end();
    47ac:	4b04      	ldr	r3, [pc, #16]	; (47c0 <send_nine+0x2c>)
}
    47ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    47b2:	4718      	bx	r3
    47b4:	000044c9 	.word	0x000044c9
    47b8:	000044b1 	.word	0x000044b1
    47bc:	0000449d 	.word	0x0000449d
    47c0:	00004471 	.word	0x00004471

000047c4 <send_six>:

void send_six(void) { // 011 011 0
    47c4:	b510      	push	{r4, lr}
    send_preamble();
    47c6:	4b07      	ldr	r3, [pc, #28]	; (47e4 <send_six+0x20>)
    47c8:	4798      	blx	r3
    bit_CLR(); bit_SET(); bit_SET();
    47ca:	4807      	ldr	r0, [pc, #28]	; (47e8 <send_six+0x24>)
    47cc:	4780      	blx	r0
    47ce:	4907      	ldr	r1, [pc, #28]	; (47ec <send_six+0x28>)
    47d0:	4788      	blx	r1
    47d2:	4788      	blx	r1
    bit_CLR(); bit_SET(); bit_SET();
    47d4:	4780      	blx	r0
    47d6:	4788      	blx	r1
    47d8:	4788      	blx	r1
    bit_CLR();
    47da:	4780      	blx	r0
    common_end();
    47dc:	4b04      	ldr	r3, [pc, #16]	; (47f0 <send_six+0x2c>)
}
    47de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    47e2:	4718      	bx	r3
    47e4:	000044c9 	.word	0x000044c9
    47e8:	0000449d 	.word	0x0000449d
    47ec:	000044b1 	.word	0x000044b1
    47f0:	00004471 	.word	0x00004471

000047f4 <send_eight>:

void send_eight(void) { // 0001110 maybe
    47f4:	b510      	push	{r4, lr}
    send_preamble();
    47f6:	4b07      	ldr	r3, [pc, #28]	; (4814 <send_eight+0x20>)
    47f8:	4798      	blx	r3
    bit_CLR(); bit_CLR(); bit_CLR();
    47fa:	4907      	ldr	r1, [pc, #28]	; (4818 <send_eight+0x24>)
    47fc:	4788      	blx	r1
    47fe:	4788      	blx	r1
    4800:	4788      	blx	r1
    bit_SET(); bit_SET(); bit_SET();
    4802:	4806      	ldr	r0, [pc, #24]	; (481c <send_eight+0x28>)
    4804:	4780      	blx	r0
    4806:	4780      	blx	r0
    4808:	4780      	blx	r0
    bit_CLR();
    480a:	4788      	blx	r1
    common_end();
    480c:	4b04      	ldr	r3, [pc, #16]	; (4820 <send_eight+0x2c>)
}
    480e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4812:	4718      	bx	r3
    4814:	000044c9 	.word	0x000044c9
    4818:	0000449d 	.word	0x0000449d
    481c:	000044b1 	.word	0x000044b1
    4820:	00004471 	.word	0x00004471

00004824 <send_november>:

void send_november(void) { // zero one one one zero zero one
    4824:	b510      	push	{r4, lr}
    send_preamble();
    4826:	4b07      	ldr	r3, [pc, #28]	; (4844 <send_november+0x20>)
    4828:	4798      	blx	r3
    bit_CLR();
    482a:	4807      	ldr	r0, [pc, #28]	; (4848 <send_november+0x24>)
    482c:	4780      	blx	r0
    bit_SET();
    482e:	4907      	ldr	r1, [pc, #28]	; (484c <send_november+0x28>)
    4830:	4788      	blx	r1
    bit_SET();
    4832:	4788      	blx	r1
    bit_SET();
    4834:	4788      	blx	r1
    bit_CLR();
    4836:	4780      	blx	r0
    bit_CLR();
    4838:	4780      	blx	r0
    bit_SET();
    483a:	4788      	blx	r1
    common_end();
    483c:	4b04      	ldr	r3, [pc, #16]	; (4850 <send_november+0x2c>)
}
    483e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4842:	4718      	bx	r3
    4844:	000044c9 	.word	0x000044c9
    4848:	0000449d 	.word	0x0000449d
    484c:	000044b1 	.word	0x000044b1
    4850:	00004471 	.word	0x00004471

00004854 <send_romeo>:

void send_romeo(void) { // 0 1 00 101
    4854:	b510      	push	{r4, lr}
    send_preamble();
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <send_romeo+0x20>)
    4858:	4798      	blx	r3
    bit_CLR();
    485a:	4907      	ldr	r1, [pc, #28]	; (4878 <send_romeo+0x24>)
    485c:	4788      	blx	r1
    bit_SET();
    485e:	4807      	ldr	r0, [pc, #28]	; (487c <send_romeo+0x28>)
    4860:	4780      	blx	r0
    bit_CLR();
    4862:	4788      	blx	r1
    bit_CLR();
    4864:	4788      	blx	r1
    bit_SET();
    4866:	4780      	blx	r0
    bit_CLR();
    4868:	4788      	blx	r1
    bit_SET();
    486a:	4780      	blx	r0
    common_end();
    486c:	4b04      	ldr	r3, [pc, #16]	; (4880 <send_romeo+0x2c>)
}
    486e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4872:	4718      	bx	r3
    4874:	000044c9 	.word	0x000044c9
    4878:	0000449d 	.word	0x0000449d
    487c:	000044b1 	.word	0x000044b1
    4880:	00004471 	.word	0x00004471

00004884 <send_four>:

void send_four(void) { // 0010110
    4884:	b510      	push	{r4, lr}
    send_preamble();
    4886:	4b07      	ldr	r3, [pc, #28]	; (48a4 <send_four+0x20>)
    4888:	4798      	blx	r3
    bit_CLR(); bit_CLR();
    488a:	4907      	ldr	r1, [pc, #28]	; (48a8 <send_four+0x24>)
    488c:	4788      	blx	r1
    488e:	4788      	blx	r1
    bit_SET(); bit_CLR();
    4890:	4806      	ldr	r0, [pc, #24]	; (48ac <send_four+0x28>)
    4892:	4780      	blx	r0
    4894:	4788      	blx	r1
    bit_SET(); bit_SET();
    4896:	4780      	blx	r0
    4898:	4780      	blx	r0
    bit_CLR();
    489a:	4788      	blx	r1
    common_end();
    489c:	4b04      	ldr	r3, [pc, #16]	; (48b0 <send_four+0x2c>)
}
    489e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    48a2:	4718      	bx	r3
    48a4:	000044c9 	.word	0x000044c9
    48a8:	0000449d 	.word	0x0000449d
    48ac:	000044b1 	.word	0x000044b1
    48b0:	00004471 	.word	0x00004471

000048b4 <send_tango>:

void send_tango(void) { // double zero then alternate out to the end
    48b4:	b510      	push	{r4, lr}
    send_preamble();
    48b6:	4b07      	ldr	r3, [pc, #28]	; (48d4 <send_tango+0x20>)
    48b8:	4798      	blx	r3

    bit_CLR();
    48ba:	4907      	ldr	r1, [pc, #28]	; (48d8 <send_tango+0x24>)
    48bc:	4788      	blx	r1
    bit_CLR();
    48be:	4788      	blx	r1
    bit_SET();
    48c0:	4806      	ldr	r0, [pc, #24]	; (48dc <send_tango+0x28>)
    48c2:	4780      	blx	r0
    bit_CLR();
    48c4:	4788      	blx	r1
    bit_SET();
    48c6:	4780      	blx	r0
    bit_CLR();
    48c8:	4788      	blx	r1
    bit_SET();
    48ca:	4780      	blx	r0
    common_end();
    48cc:	4b04      	ldr	r3, [pc, #16]	; (48e0 <send_tango+0x2c>)
}
    48ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    48d2:	4718      	bx	r3
    48d4:	000044c9 	.word	0x000044c9
    48d8:	0000449d 	.word	0x0000449d
    48dc:	000044b1 	.word	0x000044b1
    48e0:	00004471 	.word	0x00004471

000048e4 <send_one>:

void send_one(void) { // send_one(); one triple zero one one zero : number_one
    48e4:	b510      	push	{r4, lr}

    send_preamble();
    48e6:	4b07      	ldr	r3, [pc, #28]	; (4904 <send_one+0x20>)
    48e8:	4798      	blx	r3





    bit_SET();
    48ea:	4807      	ldr	r0, [pc, #28]	; (4908 <send_one+0x24>)
    48ec:	4780      	blx	r0
    bit_CLR();
    48ee:	4907      	ldr	r1, [pc, #28]	; (490c <send_one+0x28>)
    48f0:	4788      	blx	r1
    bit_CLR();
    48f2:	4788      	blx	r1
    bit_CLR();
    48f4:	4788      	blx	r1
    bit_SET();
    48f6:	4780      	blx	r0
    bit_SET();
    48f8:	4780      	blx	r0
    bit_CLR();
    48fa:	4788      	blx	r1

    common_end();
    48fc:	4b04      	ldr	r3, [pc, #16]	; (4910 <send_one+0x2c>)
}
    48fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4902:	4718      	bx	r3
    4904:	000044c9 	.word	0x000044c9
    4908:	000044b1 	.word	0x000044b1
    490c:	0000449d 	.word	0x0000449d
    4910:	00004471 	.word	0x00004471

00004914 <send_alpha>:

void send_alpha(void) { // one bit at beginning and end, four clear bits in between
    4914:	b510      	push	{r4, lr}

    send_preamble();
    4916:	4b07      	ldr	r3, [pc, #28]	; (4934 <send_alpha+0x20>)
    4918:	4798      	blx	r3

    bit_SET();
    491a:	4807      	ldr	r0, [pc, #28]	; (4938 <send_alpha+0x24>)
    491c:	4780      	blx	r0
    bit_CLR();
    491e:	4907      	ldr	r1, [pc, #28]	; (493c <send_alpha+0x28>)
    4920:	4788      	blx	r1
    bit_CLR();
    4922:	4788      	blx	r1
    bit_CLR();
    4924:	4788      	blx	r1
    bit_CLR();
    4926:	4788      	blx	r1
    bit_CLR();
    4928:	4788      	blx	r1
    bit_SET();
    492a:	4780      	blx	r0

    common_end();
    492c:	4b04      	ldr	r3, [pc, #16]	; (4940 <send_alpha+0x2c>)
}
    492e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4932:	4718      	bx	r3
    4934:	000044c9 	.word	0x000044c9
    4938:	000044b1 	.word	0x000044b1
    493c:	0000449d 	.word	0x0000449d
    4940:	00004471 	.word	0x00004471

00004944 <send_whiskey>:



void send_whiskey(void) { // three set bits and then alternating totaling five
    4944:	b510      	push	{r4, lr}

    // preamble

    send_nothing(); // guard time
    4946:	4b09      	ldr	r3, [pc, #36]	; (496c <send_whiskey+0x28>)
    4948:	4798      	blx	r3
    pip_space(); // delay 26 uSec
    494a:	4b09      	ldr	r3, [pc, #36]	; (4970 <send_whiskey+0x2c>)
    494c:	4798      	blx	r3

    bit_CLR();
    494e:	4809      	ldr	r0, [pc, #36]	; (4974 <send_whiskey+0x30>)
    4950:	4780      	blx	r0

    // preamble ends.


    // send 2^0 bit:
    bit_SET();
    4952:	4909      	ldr	r1, [pc, #36]	; (4978 <send_whiskey+0x34>)
    4954:	4788      	blx	r1

    // send 2^1 bit:
    bit_SET();
    4956:	4788      	blx	r1

    // send 2^2 bit:
    bit_SET();
    4958:	4788      	blx	r1

    // send 2^3 bit:
    bit_CLR();
    495a:	4780      	blx	r0

    // send 2^4 bit:
    bit_SET();
    495c:	4788      	blx	r1

    // send 2^5 bit:
    bit_CLR();
    495e:	4780      	blx	r0

    // send 2^6 bit:
    bit_SET();
    4960:	4788      	blx	r1

    common_end();
    4962:	4b06      	ldr	r3, [pc, #24]	; (497c <send_whiskey+0x38>)
}
    4964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4968:	4718      	bx	r3
    496a:	bf00      	nop
    496c:	0000444d 	.word	0x0000444d
    4970:	000043ed 	.word	0x000043ed
    4974:	0000449d 	.word	0x0000449d
    4978:	000044b1 	.word	0x000044b1
    497c:	00004471 	.word	0x00004471

00004980 <send_seven>:


void send_seven(void) { // set set set clear set set
    4980:	b510      	push	{r4, lr}

    // preamble

    send_nothing(); // guard time
    4982:	4b09      	ldr	r3, [pc, #36]	; (49a8 <send_seven+0x28>)
    4984:	4798      	blx	r3
    pip_space(); // delay 26 uSec
    4986:	4b09      	ldr	r3, [pc, #36]	; (49ac <send_seven+0x2c>)
    4988:	4798      	blx	r3

    bit_CLR();
    498a:	4809      	ldr	r0, [pc, #36]	; (49b0 <send_seven+0x30>)
    498c:	4780      	blx	r0

    // preamble ends.


    // send 2^0 bit:
    bit_SET();
    498e:	4909      	ldr	r1, [pc, #36]	; (49b4 <send_seven+0x34>)
    4990:	4788      	blx	r1

    // send 2^1 bit:
    bit_SET();
    4992:	4788      	blx	r1

    // send 2^2 bit:
    bit_SET();
    4994:	4788      	blx	r1

    // send 2^3 bit:
    bit_CLR();
    4996:	4780      	blx	r0

    // send 2^4 bit:
    bit_SET();
    4998:	4788      	blx	r1

    // send 2^5 bit:
    bit_SET();
    499a:	4788      	blx	r1

    // send 2^6 bit:
    bit_CLR();
    499c:	4780      	blx	r0

    common_end();
    499e:	4b06      	ldr	r3, [pc, #24]	; (49b8 <send_seven+0x38>)
}
    49a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    49a4:	4718      	bx	r3
    49a6:	bf00      	nop
    49a8:	0000444d 	.word	0x0000444d
    49ac:	000043ed 	.word	0x000043ed
    49b0:	0000449d 	.word	0x0000449d
    49b4:	000044b1 	.word	0x000044b1
    49b8:	00004471 	.word	0x00004471

000049bc <send_five>:



void send_five(void) { // set clear set clear set set is five
    49bc:	b510      	push	{r4, lr}
    // preamble

    send_nothing(); // guard time
    49be:	4b09      	ldr	r3, [pc, #36]	; (49e4 <send_five+0x28>)
    49c0:	4798      	blx	r3
    pip_space(); // delay 26 uSec
    49c2:	4b09      	ldr	r3, [pc, #36]	; (49e8 <send_five+0x2c>)
    49c4:	4798      	blx	r3

    bit_CLR();
    49c6:	4909      	ldr	r1, [pc, #36]	; (49ec <send_five+0x30>)
    49c8:	4788      	blx	r1

    // preamble ends.


    // send 2^0 bit:
    bit_SET();
    49ca:	4809      	ldr	r0, [pc, #36]	; (49f0 <send_five+0x34>)
    49cc:	4780      	blx	r0

    // send 2^1 bit:
    bit_CLR();
    49ce:	4788      	blx	r1

    // send 2^2 bit:
    bit_SET();
    49d0:	4780      	blx	r0

    // send 2^3 bit:
    bit_CLR();
    49d2:	4788      	blx	r1

    // send 2^4 bit:
    bit_SET();
    49d4:	4780      	blx	r0

    // send 2^5 bit:
    bit_SET();
    49d6:	4780      	blx	r0

    // send 2^6 bit:
    bit_CLR();
    49d8:	4788      	blx	r1

    // post-amble hi hi

    common_end();
    49da:	4b06      	ldr	r3, [pc, #24]	; (49f4 <send_five+0x38>)
}
    49dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    49e0:	4718      	bx	r3
    49e2:	bf00      	nop
    49e4:	0000444d 	.word	0x0000444d
    49e8:	000043ed 	.word	0x000043ed
    49ec:	0000449d 	.word	0x0000449d
    49f0:	000044b1 	.word	0x000044b1
    49f4:	00004471 	.word	0x00004471

000049f8 <send_at_symb>:



void send_at_symb(void) { // send at symbol circle a
    49f8:	b510      	push	{r4, lr}
    // preamble

    send_nothing(); // guard time
    49fa:	4b0c      	ldr	r3, [pc, #48]	; (4a2c <send_at_symb+0x34>)
    49fc:	4798      	blx	r3
    pip_space(); // delay 26 uSec
    49fe:	4a0c      	ldr	r2, [pc, #48]	; (4a30 <send_at_symb+0x38>)
    4a00:	4790      	blx	r2

    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    4a02:	490c      	ldr	r1, [pc, #48]	; (4a34 <send_at_symb+0x3c>)
    4a04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4a08:	6148      	str	r0, [r1, #20]
    pip_space(); // delay 26 uSec
    4a0a:	4790      	blx	r2
    // preamble ends.



    // send 2^0 bit:
    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17, clr
    4a0c:	6148      	str	r0, [r1, #20]
    pip_space(); // delay 26 uSec
    4a0e:	4790      	blx	r2

    // send 2^1 bit:
    pip_space(); // delay 26 uSec
    4a10:	4790      	blx	r2

    // send 2^2 bit:
    pip_space(); // delay 26 uSec
    4a12:	4790      	blx	r2

    // send 2^3 bit:
    pip_space(); // delay 26 uSec
    4a14:	4790      	blx	r2

    // send 2^4 bit:
    pip_space(); // delay 26 uSec
    4a16:	4790      	blx	r2

    // send 2^5 bit:
    pip_space(); // delay 26 uSec
    4a18:	4790      	blx	r2

    // send 2^6 bit:
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1  1 pinwrite
    4a1a:	698b      	ldr	r3, [r1, #24]
    4a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a20:	618b      	str	r3, [r1, #24]
    pip_space(); // delay 26 uSec
    4a22:	4790      	blx	r2

    // post-amble hi hi

    common_end();
    4a24:	4b04      	ldr	r3, [pc, #16]	; (4a38 <send_at_symb+0x40>)
}
    4a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4a2a:	4718      	bx	r3
    4a2c:	0000444d 	.word	0x0000444d
    4a30:	000043ed 	.word	0x000043ed
    4a34:	41008000 	.word	0x41008000
    4a38:	00004471 	.word	0x00004471

00004a3c <send_quebec>:


void send_quebec(void) { // send upper case Q
    4a3c:	b510      	push	{r4, lr}
    // preamble
    // comment

    send_nothing(); // guard time
    4a3e:	4b11      	ldr	r3, [pc, #68]	; (4a84 <send_quebec+0x48>)
    4a40:	4798      	blx	r3

    pip_space(); // delay 26 uSec
    4a42:	4a11      	ldr	r2, [pc, #68]	; (4a88 <send_quebec+0x4c>)
    4a44:	4790      	blx	r2

    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    4a46:	4911      	ldr	r1, [pc, #68]	; (4a8c <send_quebec+0x50>)
    4a48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4a4c:	6148      	str	r0, [r1, #20]
    pip_space(); // delay 26 uSec
    4a4e:	4790      	blx	r2
    // preamble ends.



    // send 2^0 bit:
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1  1 pinwrite
    4a50:	698b      	ldr	r3, [r1, #24]
    4a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a56:	618b      	str	r3, [r1, #24]
    pip_space(); // delay 26 uSec
    4a58:	4790      	blx	r2



    // send 2^1 bit:
    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17, clr
    4a5a:	6148      	str	r0, [r1, #20]
    pip_space(); // delay 26 uSec
    4a5c:	4790      	blx	r2

    // send 2^2 bit:
    pip_space(); // delay 26 uSec
    4a5e:	4790      	blx	r2

    // send 2^3 bit:
    pip_space(); // delay 26 uSec
    4a60:	4790      	blx	r2

    // send 2^4 bit:
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1  1 pinwrite
    4a62:	698b      	ldr	r3, [r1, #24]
    4a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a68:	618b      	str	r3, [r1, #24]
    pip_space(); // delay 26 uSec
    4a6a:	4790      	blx	r2

    // send 2^5 bit:
    // Nov 2020 - finger flubbed here - watch for an error
    PORT->Group[0].OUTCLR.reg = (uint32_t)(1 << 17); // PA17 //  0  1 pinwrite
    4a6c:	6148      	str	r0, [r1, #20]
    pip_space(); // delay 26 uSec
    4a6e:	4790      	blx	r2

    // send 2^6 bit:

    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 17); // PA17 //  1  1 pinwrite
    4a70:	698b      	ldr	r3, [r1, #24]
    4a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4a76:	618b      	str	r3, [r1, #24]
    pip_space(); // delay 26 uSec
    4a78:	4790      	blx	r2

    // post-amble hi hi
    common_end();
    4a7a:	4b05      	ldr	r3, [pc, #20]	; (4a90 <send_quebec+0x54>)
}
    4a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    common_end();
    4a80:	4718      	bx	r3
    4a82:	bf00      	nop
    4a84:	0000444d 	.word	0x0000444d
    4a88:	000043ed 	.word	0x000043ed
    4a8c:	41008000 	.word	0x41008000
    4a90:	00004471 	.word	0x00004471

00004a94 <printty_zero>:
        send_at_symb(); send_gapspace();
        send_at_symb(); send_gapspace();
 // }
}

void printty_zero(void) {
    4a94:	b510      	push	{r4, lr}
    send_zero();
    4a96:	4b03      	ldr	r3, [pc, #12]	; (4aa4 <printty_zero+0x10>)
    4a98:	4798      	blx	r3
    send_gapspace();
    4a9a:	4b03      	ldr	r3, [pc, #12]	; (4aa8 <printty_zero+0x14>)
}
    4a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_gapspace();
    4aa0:	4718      	bx	r3
    4aa2:	bf00      	nop
    4aa4:	00004765 	.word	0x00004765
    4aa8:	0000474d 	.word	0x0000474d

00004aac <printty_one>:
void printty_one(void) {
    4aac:	b510      	push	{r4, lr}
    send_one();
    4aae:	4b03      	ldr	r3, [pc, #12]	; (4abc <printty_one+0x10>)
    4ab0:	4798      	blx	r3
    send_gapspace();
    4ab2:	4b03      	ldr	r3, [pc, #12]	; (4ac0 <printty_one+0x14>)
}
    4ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send_gapspace();
    4ab8:	4718      	bx	r3
    4aba:	bf00      	nop
    4abc:	000048e5 	.word	0x000048e5
    4ac0:	0000474d 	.word	0x0000474d

00004ac4 <showbits>:


void showbits(unsigned int x) {
    4ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < 8; i++) {
       (x & (1u << i)) ? printty_zero() : printty_one();
    4ac8:	4e09      	ldr	r6, [pc, #36]	; (4af0 <showbits+0x2c>)
    4aca:	4f0a      	ldr	r7, [pc, #40]	; (4af4 <showbits+0x30>)
void showbits(unsigned int x) {
    4acc:	4605      	mov	r5, r0
    for(int i = 0; i < 8; i++) {
    4ace:	2400      	movs	r4, #0
       (x & (1u << i)) ? printty_zero() : printty_one();
    4ad0:	fa25 f304 	lsr.w	r3, r5, r4
    4ad4:	07db      	lsls	r3, r3, #31
    4ad6:	d509      	bpl.n	4aec <showbits+0x28>
    4ad8:	47b8      	blx	r7
    for(int i = 0; i < 8; i++) {
    4ada:	3401      	adds	r4, #1
    4adc:	2c08      	cmp	r4, #8
    4ade:	d1f7      	bne.n	4ad0 <showbits+0xc>
    }
    send_crlf(); send_gapspace();
    4ae0:	4b05      	ldr	r3, [pc, #20]	; (4af8 <showbits+0x34>)
    4ae2:	4798      	blx	r3
    4ae4:	4b05      	ldr	r3, [pc, #20]	; (4afc <showbits+0x38>)
}
    4ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    send_crlf(); send_gapspace();
    4aea:	4718      	bx	r3
       (x & (1u << i)) ? printty_zero() : printty_one();
    4aec:	47b0      	blx	r6
    4aee:	e7f4      	b.n	4ada <showbits+0x16>
    4af0:	00004aad 	.word	0x00004aad
    4af4:	00004a95 	.word	0x00004a95
    4af8:	000046c9 	.word	0x000046c9
    4afc:	0000474d 	.word	0x0000474d

00004b00 <blitwbits>:


void blitwbits(unsigned int x) {
    4b00:	b570      	push	{r4, r5, r6, lr}
    send_preamble();
    4b02:	4b09      	ldr	r3, [pc, #36]	; (4b28 <blitwbits+0x28>)
    for(int i = 0; i < 7; i++) {
       (x & (1u << i)) ?  bit_SET() : bit_CLR();
    4b04:	4c09      	ldr	r4, [pc, #36]	; (4b2c <blitwbits+0x2c>)
    4b06:	4d0a      	ldr	r5, [pc, #40]	; (4b30 <blitwbits+0x30>)
    send_preamble();
    4b08:	4798      	blx	r3
    for(int i = 0; i < 7; i++) {
    4b0a:	2100      	movs	r1, #0
       (x & (1u << i)) ?  bit_SET() : bit_CLR();
    4b0c:	fa20 f301 	lsr.w	r3, r0, r1
    4b10:	07db      	lsls	r3, r3, #31
    4b12:	d507      	bpl.n	4b24 <blitwbits+0x24>
    4b14:	47a8      	blx	r5
    for(int i = 0; i < 7; i++) {
    4b16:	3101      	adds	r1, #1
    4b18:	2907      	cmp	r1, #7
    4b1a:	d1f7      	bne.n	4b0c <blitwbits+0xc>
    }
    common_end();
    4b1c:	4b05      	ldr	r3, [pc, #20]	; (4b34 <blitwbits+0x34>)
}
    4b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    common_end();
    4b22:	4718      	bx	r3
       (x & (1u << i)) ?  bit_SET() : bit_CLR();
    4b24:	47a0      	blx	r4
    4b26:	e7f6      	b.n	4b16 <blitwbits+0x16>
    4b28:	000044c9 	.word	0x000044c9
    4b2c:	0000449d 	.word	0x0000449d
    4b30:	000044b1 	.word	0x000044b1
    4b34:	00004471 	.word	0x00004471

00004b38 <print_mar>:

void print_mar(void) {
    4b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int j = 64; j>0; j--) { // send the text sixty four times
        send_crlf(); send_gapspace();
    4b3c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4bc0 <print_mar+0x88>
    4b40:	4d1d      	ldr	r5, [pc, #116]	; (4bb8 <print_mar+0x80>)
void print_mar(void) {
    4b42:	f04f 0840 	mov.w	r8, #64	; 0x40
    4b46:	464e      	mov	r6, r9
        send_crlf(); send_gapspace();
    4b48:	47c8      	blx	r9
    4b4a:	47a8      	blx	r5
        for (uint8_t findix = 32; findix < 127; findix++) {
            blitwbits(findix);
    4b4c:	4c1b      	ldr	r4, [pc, #108]	; (4bbc <print_mar+0x84>)
        send_crlf(); send_gapspace();
    4b4e:	2720      	movs	r7, #32
            blitwbits(findix);
    4b50:	4638      	mov	r0, r7
    4b52:	3701      	adds	r7, #1
    4b54:	47a0      	blx	r4
        for (uint8_t findix = 32; findix < 127; findix++) {
    4b56:	2f7f      	cmp	r7, #127	; 0x7f
    4b58:	d1fa      	bne.n	4b50 <print_mar+0x18>
        }
    send_crlf(); send_gapspace();
    4b5a:	47b0      	blx	r6
    4b5c:	47a8      	blx	r5
    for (int j = 64; j>0; j--) { // send the text sixty four times
    4b5e:	f1b8 0801 	subs.w	r8, r8, #1
    4b62:	d1f1      	bne.n	4b48 <print_mar+0x10>
    }

    uint8_t letr = 'a';

    send_crlf(); send_gapspace();
    4b64:	47b0      	blx	r6
    4b66:	47a8      	blx	r5
    send_crlf(); send_gapspace();
    4b68:	47b0      	blx	r6
    4b6a:	47a8      	blx	r5
    letr = ' '; blitwbits(letr);
    4b6c:	2020      	movs	r0, #32
    4b6e:	47a0      	blx	r4
    letr = ' '; blitwbits(letr);
    4b70:	2020      	movs	r0, #32
    4b72:	47a0      	blx	r4
    letr = 'a'; blitwbits(letr);
    4b74:	2061      	movs	r0, #97	; 0x61
    4b76:	47a0      	blx	r4
    letr = 'r'; blitwbits(letr);
    4b78:	2072      	movs	r0, #114	; 0x72
    4b7a:	47a0      	blx	r4
    letr = 'e'; blitwbits(letr);
    4b7c:	2065      	movs	r0, #101	; 0x65
    4b7e:	47a0      	blx	r4
    letr = ' '; blitwbits(letr);
    4b80:	2020      	movs	r0, #32
    4b82:	47a0      	blx	r4
    letr = 'y'; blitwbits(letr);
    4b84:	2079      	movs	r0, #121	; 0x79
    4b86:	47a0      	blx	r4
    letr = 'o'; blitwbits(letr);
    4b88:	206f      	movs	r0, #111	; 0x6f
    4b8a:	47a0      	blx	r4
    letr = 'u'; blitwbits(letr);
    4b8c:	2075      	movs	r0, #117	; 0x75
    4b8e:	47a0      	blx	r4
    letr = ' '; blitwbits(letr);
    4b90:	2020      	movs	r0, #32
    4b92:	47a0      	blx	r4
    letr = 'r'; blitwbits(letr);
    4b94:	2072      	movs	r0, #114	; 0x72
    4b96:	47a0      	blx	r4
    letr = 'e'; blitwbits(letr);
    4b98:	2065      	movs	r0, #101	; 0x65
    4b9a:	47a0      	blx	r4
    letr = 'a'; blitwbits(letr);
    4b9c:	2061      	movs	r0, #97	; 0x61
    4b9e:	47a0      	blx	r4
    letr = 'd'; blitwbits(letr);
    4ba0:	2064      	movs	r0, #100	; 0x64
    4ba2:	47a0      	blx	r4
    letr = 'y'; blitwbits(letr);
    4ba4:	2079      	movs	r0, #121	; 0x79
    4ba6:	47a0      	blx	r4
    letr = '?'; blitwbits(letr);
    4ba8:	203f      	movs	r0, #63	; 0x3f
    4baa:	47a0      	blx	r4
    send_crlf(); send_gapspace();
    4bac:	47b0      	blx	r6
    4bae:	462b      	mov	r3, r5
}
    4bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    send_crlf(); send_gapspace();
    4bb4:	4718      	bx	r3
    4bb6:	bf00      	nop
    4bb8:	0000474d 	.word	0x0000474d
    4bbc:	00004b01 	.word	0x00004b01
    4bc0:	000046c9 	.word	0x000046c9

00004bc4 <do_this>:
        printp();
    }
    // common_end();
}

void do_this(void) {
    4bc4:	b570      	push	{r4, r5, r6, lr}
    send_crlf(); send_gapspace();
    4bc6:	4b07      	ldr	r3, [pc, #28]	; (4be4 <do_this+0x20>)
    for (int i=0; i<10; i++) {
        hold = 80 + i;
    4bc8:	4e07      	ldr	r6, [pc, #28]	; (4be8 <do_this+0x24>)
        // do_that(); - not printing nice
        showbits(hold); // this works okay
    4bca:	4d08      	ldr	r5, [pc, #32]	; (4bec <do_this+0x28>)
    send_crlf(); send_gapspace();
    4bcc:	4798      	blx	r3
    4bce:	4b08      	ldr	r3, [pc, #32]	; (4bf0 <do_this+0x2c>)
    4bd0:	4798      	blx	r3
    4bd2:	2450      	movs	r4, #80	; 0x50
        hold = 80 + i;
    4bd4:	7074      	strb	r4, [r6, #1]
        showbits(hold); // this works okay
    4bd6:	4620      	mov	r0, r4
    4bd8:	3401      	adds	r4, #1
    4bda:	47a8      	blx	r5
    for (int i=0; i<10; i++) {
    4bdc:	2c5a      	cmp	r4, #90	; 0x5a
    4bde:	d1f9      	bne.n	4bd4 <do_this+0x10>
    }
}
    4be0:	bd70      	pop	{r4, r5, r6, pc}
    4be2:	bf00      	nop
    4be4:	000046c9 	.word	0x000046c9
    4be8:	20000004 	.word	0x20000004
    4bec:	00004ac5 	.word	0x00004ac5
    4bf0:	0000474d 	.word	0x0000474d

00004bf4 <blink_timing>:
// ###bookmark
// ###bookmark

void blink_timing(void) {
    4bf4:	b507      	push	{r0, r1, r2, lr}
    for (volatile int j=12433; j>0; j--) {
    4bf6:	f243 0391 	movw	r3, #12433	; 0x3091
        pip_space(); // delay 26 uSec
    4bfa:	4a06      	ldr	r2, [pc, #24]	; (4c14 <blink_timing+0x20>)
    for (volatile int j=12433; j>0; j--) {
    4bfc:	9301      	str	r3, [sp, #4]
    4bfe:	9b01      	ldr	r3, [sp, #4]
    4c00:	2b00      	cmp	r3, #0
    4c02:	dc02      	bgt.n	4c0a <blink_timing+0x16>
    }
}
    4c04:	b003      	add	sp, #12
    4c06:	f85d fb04 	ldr.w	pc, [sp], #4
        pip_space(); // delay 26 uSec
    4c0a:	4790      	blx	r2
    for (volatile int j=12433; j>0; j--) {
    4c0c:	9b01      	ldr	r3, [sp, #4]
    4c0e:	3b01      	subs	r3, #1
    4c10:	9301      	str	r3, [sp, #4]
    4c12:	e7f4      	b.n	4bfe <blink_timing+0xa>
    4c14:	000043ed 	.word	0x000043ed

00004c18 <blink>:

void blink(void) {
    4c18:	b510      	push	{r4, lr}
    blink_timing(); // send_nothing();
    4c1a:	4c04      	ldr	r4, [pc, #16]	; (4c2c <blink+0x14>)
    4c1c:	47a0      	blx	r4
        PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 22); // PA22 // D13 toggle
    4c1e:	4904      	ldr	r1, [pc, #16]	; (4c30 <blink+0x18>)
    4c20:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    4c24:	61c8      	str	r0, [r1, #28]
    led_stuph(); // toggle
    blink_timing();
    4c26:	47a0      	blx	r4
        PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 22); // PA22 // D13 toggle
    4c28:	61c8      	str	r0, [r1, #28]
    led_stuph();
}
    4c2a:	bd10      	pop	{r4, pc}
    4c2c:	00004bf5 	.word	0x00004bf5
    4c30:	41008000 	.word	0x41008000

00004c34 <main>:

int main(void) {
    4c34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Nice triple, 8 MHZ:
    SystemCoreClockUpdate();
    4c38:	4b42      	ldr	r3, [pc, #264]	; (4d44 <main+0x110>)
    SystemInit();
    pins_setup(); // D11 in OUTPUT mode
    blink(); blink(); blink(); blink(); blink(); blink();
    4c3a:	4c43      	ldr	r4, [pc, #268]	; (4d48 <main+0x114>)
    SystemCoreClockUpdate();
    4c3c:	4798      	blx	r3
    SystemInit();
    4c3e:	4b43      	ldr	r3, [pc, #268]	; (4d4c <main+0x118>)
    4c40:	4798      	blx	r3
    pins_setup(); // D11 in OUTPUT mode
    4c42:	4b43      	ldr	r3, [pc, #268]	; (4d50 <main+0x11c>)
    4c44:	4798      	blx	r3
    blink(); blink(); blink(); blink(); blink(); blink();
    4c46:	47a0      	blx	r4
    4c48:	47a0      	blx	r4
    4c4a:	47a0      	blx	r4
    4c4c:	47a0      	blx	r4
    4c4e:	47a0      	blx	r4
    4c50:	47a0      	blx	r4
    // ClockInit120();
    // setup_PA14_as_GCLK_IO();
    // omit:
    // SysTick_Config(4000);

    stuffit = 43;
    4c52:	4b40      	ldr	r3, [pc, #256]	; (4d54 <main+0x120>)
    4c54:	222b      	movs	r2, #43	; 0x2b
    4c56:	709a      	strb	r2, [r3, #2]
    send_crlf(); send_gapspace();
    4c58:	4b3f      	ldr	r3, [pc, #252]	; (4d58 <main+0x124>)
    4c5a:	4798      	blx	r3
    4c5c:	4b3f      	ldr	r3, [pc, #252]	; (4d5c <main+0x128>)
    4c5e:	4798      	blx	r3
    print_mar();
    4c60:	4b3f      	ldr	r3, [pc, #252]	; (4d60 <main+0x12c>)
    4c62:	4798      	blx	r3

    do_this();
    4c64:	4b3f      	ldr	r3, [pc, #252]	; (4d64 <main+0x130>)
    4c66:	4798      	blx	r3

    for (volatile int k=21044; k>0; k--){
    4c68:	f245 2334 	movw	r3, #21044	; 0x5234
    4c6c:	9301      	str	r3, [sp, #4]
    4c6e:	9b01      	ldr	r3, [sp, #4]
    4c70:	2b00      	cmp	r3, #0
    4c72:	dc5a      	bgt.n	4d2a <main+0xf6>
    }

    for (volatile int k=9932211; k>0; k--){
    4c74:	4b3c      	ldr	r3, [pc, #240]	; (4d68 <main+0x134>)
    4c76:	4e3d      	ldr	r6, [pc, #244]	; (4d6c <main+0x138>)
    4c78:	9302      	str	r3, [sp, #8]
    4c7a:	9b02      	ldr	r3, [sp, #8]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	dc57      	bgt.n	4d30 <main+0xfc>
// on the oscilloscope.

    for (int j=44444; j>0; j--){
        // send_skeleton(); // compiler warning

                   send_gapp();
    4c80:	4c3b      	ldr	r4, [pc, #236]	; (4d70 <main+0x13c>)

        send_whiskey();        send_gapp();
    4c82:	f8df 8148 	ldr.w	r8, [pc, #328]	; 4dcc <main+0x198>
        send_tango();          send_gapp();
    4c86:	4f3b      	ldr	r7, [pc, #236]	; (4d74 <main+0x140>)
    4c88:	f64a 559c 	movw	r5, #44444	; 0xad9c
                   send_gapp();
    4c8c:	47a0      	blx	r4
        send_whiskey();        send_gapp();
    4c8e:	47c0      	blx	r8
    4c90:	47a0      	blx	r4
        send_tango();          send_gapp();
    4c92:	47b8      	blx	r7
    4c94:	47a0      	blx	r4
        send_quebec();         send_gapp();
    4c96:	4b38      	ldr	r3, [pc, #224]	; (4d78 <main+0x144>)
    4c98:	4798      	blx	r3
    4c9a:	47a0      	blx	r4
        send_romeo();          send_gapp();
    4c9c:	4b37      	ldr	r3, [pc, #220]	; (4d7c <main+0x148>)
    4c9e:	4798      	blx	r3
    4ca0:	47a0      	blx	r4
        send_november();       send_gapp();
    4ca2:	4b37      	ldr	r3, [pc, #220]	; (4d80 <main+0x14c>)
    4ca4:	4798      	blx	r3
    4ca6:	47a0      	blx	r4

        send_golf();           send_gapp();
    4ca8:	4b36      	ldr	r3, [pc, #216]	; (4d84 <main+0x150>)
    4caa:	4798      	blx	r3
    4cac:	47a0      	blx	r4
        send_foxtrot();        send_gapp();
    4cae:	4b36      	ldr	r3, [pc, #216]	; (4d88 <main+0x154>)
    4cb0:	4798      	blx	r3
    4cb2:	47a0      	blx	r4
        send_echo();           send_gapp();
    4cb4:	4b35      	ldr	r3, [pc, #212]	; (4d8c <main+0x158>)
    4cb6:	4798      	blx	r3
    4cb8:	47a0      	blx	r4
        send_delta();          send_gapp();
    4cba:	4b35      	ldr	r3, [pc, #212]	; (4d90 <main+0x15c>)
    4cbc:	4798      	blx	r3
    4cbe:	47a0      	blx	r4
        send_charley();        send_gapp();
    4cc0:	4b34      	ldr	r3, [pc, #208]	; (4d94 <main+0x160>)
    4cc2:	4798      	blx	r3
    4cc4:	47a0      	blx	r4
        send_bravo();          send_gapp();
    4cc6:	4b34      	ldr	r3, [pc, #208]	; (4d98 <main+0x164>)
    4cc8:	4798      	blx	r3
    4cca:	47a0      	blx	r4
        send_alpha();          send_gapp();
    4ccc:	4b33      	ldr	r3, [pc, #204]	; (4d9c <main+0x168>)
    4cce:	4798      	blx	r3
    4cd0:	47a0      	blx	r4

        send_zero();           send_gapp();
    4cd2:	4b33      	ldr	r3, [pc, #204]	; (4da0 <main+0x16c>)
    4cd4:	4798      	blx	r3
    4cd6:	47a0      	blx	r4
        send_nine();           send_gapp();
    4cd8:	4b32      	ldr	r3, [pc, #200]	; (4da4 <main+0x170>)
    4cda:	4798      	blx	r3
    4cdc:	47a0      	blx	r4
        send_eight();          send_gapp();
    4cde:	4b32      	ldr	r3, [pc, #200]	; (4da8 <main+0x174>)
    4ce0:	4798      	blx	r3
    4ce2:	47a0      	blx	r4
        send_seven();          send_gapp();
    4ce4:	4b31      	ldr	r3, [pc, #196]	; (4dac <main+0x178>)
    4ce6:	4798      	blx	r3
    4ce8:	47a0      	blx	r4
        send_six();            send_gapp();
    4cea:	4b31      	ldr	r3, [pc, #196]	; (4db0 <main+0x17c>)
    4cec:	4798      	blx	r3
    4cee:	47a0      	blx	r4
        send_five();           send_gapp();
    4cf0:	47b0      	blx	r6
    4cf2:	47a0      	blx	r4
        send_four();           send_gapp();
    4cf4:	4b2f      	ldr	r3, [pc, #188]	; (4db4 <main+0x180>)
    4cf6:	4798      	blx	r3
    4cf8:	47a0      	blx	r4
        send_three();          send_gapp();
    4cfa:	4b2f      	ldr	r3, [pc, #188]	; (4db8 <main+0x184>)
    4cfc:	4798      	blx	r3
    4cfe:	47a0      	blx	r4
        send_two();            send_gapp();
    4d00:	4b2e      	ldr	r3, [pc, #184]	; (4dbc <main+0x188>)
    4d02:	4798      	blx	r3
    4d04:	47a0      	blx	r4
        send_one();            send_gapp();
    4d06:	4b2e      	ldr	r3, [pc, #184]	; (4dc0 <main+0x18c>)
    4d08:	4798      	blx	r3
    4d0a:	47a0      	blx	r4

        send_at_symb();        send_gapp();
    4d0c:	4b2d      	ldr	r3, [pc, #180]	; (4dc4 <main+0x190>)
    4d0e:	4798      	blx	r3
    4d10:	47a0      	blx	r4
    for (int j=44444; j>0; j--){
    4d12:	3d01      	subs	r5, #1
    4d14:	d1ba      	bne.n	4c8c <main+0x58>
// 26 uSec duration, per, or thereabouts).

    while (1) {
        for (volatile int j = SECU; j>0; j--) {
        }
        PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 21); // PA21 // D11 toggle
    4d16:	4a2c      	ldr	r2, [pc, #176]	; (4dc8 <main+0x194>)
        for (volatile int j = SECU; j>0; j--) {
    4d18:	201a      	movs	r0, #26
        PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 21); // PA21 // D11 toggle
    4d1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
        for (volatile int j = SECU; j>0; j--) {
    4d1e:	9003      	str	r0, [sp, #12]
    4d20:	9b03      	ldr	r3, [sp, #12]
    4d22:	2b00      	cmp	r3, #0
    4d24:	dc09      	bgt.n	4d3a <main+0x106>
        PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 21); // PA21 // D11 toggle
    4d26:	61d1      	str	r1, [r2, #28]
        for (volatile int j = SECU; j>0; j--) {
    4d28:	e7f9      	b.n	4d1e <main+0xea>
    for (volatile int k=21044; k>0; k--){
    4d2a:	9b01      	ldr	r3, [sp, #4]
    4d2c:	3b01      	subs	r3, #1
    4d2e:	e79d      	b.n	4c6c <main+0x38>
        send_five(); // use send_five() but no gapp when on the scope
    4d30:	47b0      	blx	r6
    for (volatile int k=9932211; k>0; k--){
    4d32:	9b02      	ldr	r3, [sp, #8]
    4d34:	3b01      	subs	r3, #1
    4d36:	9302      	str	r3, [sp, #8]
    4d38:	e79f      	b.n	4c7a <main+0x46>
        for (volatile int j = SECU; j>0; j--) {
    4d3a:	9b03      	ldr	r3, [sp, #12]
    4d3c:	3b01      	subs	r3, #1
    4d3e:	9303      	str	r3, [sp, #12]
    4d40:	e7ee      	b.n	4d20 <main+0xec>
    4d42:	bf00      	nop
    4d44:	000042ed 	.word	0x000042ed
    4d48:	00004c19 	.word	0x00004c19
    4d4c:	000042dd 	.word	0x000042dd
    4d50:	000043d1 	.word	0x000043d1
    4d54:	20000004 	.word	0x20000004
    4d58:	000046c9 	.word	0x000046c9
    4d5c:	0000474d 	.word	0x0000474d
    4d60:	00004b39 	.word	0x00004b39
    4d64:	00004bc5 	.word	0x00004bc5
    4d68:	00978db3 	.word	0x00978db3
    4d6c:	000049bd 	.word	0x000049bd
    4d70:	00004735 	.word	0x00004735
    4d74:	000048b5 	.word	0x000048b5
    4d78:	00004a3d 	.word	0x00004a3d
    4d7c:	00004855 	.word	0x00004855
    4d80:	00004825 	.word	0x00004825
    4d84:	000045d9 	.word	0x000045d9
    4d88:	00004519 	.word	0x00004519
    4d8c:	00004579 	.word	0x00004579
    4d90:	00004549 	.word	0x00004549
    4d94:	000045a9 	.word	0x000045a9
    4d98:	000044e9 	.word	0x000044e9
    4d9c:	00004915 	.word	0x00004915
    4da0:	00004765 	.word	0x00004765
    4da4:	00004795 	.word	0x00004795
    4da8:	000047f5 	.word	0x000047f5
    4dac:	00004981 	.word	0x00004981
    4db0:	000047c5 	.word	0x000047c5
    4db4:	00004885 	.word	0x00004885
    4db8:	00004609 	.word	0x00004609
    4dbc:	00004639 	.word	0x00004639
    4dc0:	000048e5 	.word	0x000048e5
    4dc4:	000049f9 	.word	0x000049f9
    4dc8:	41008000 	.word	0x41008000
    4dcc:	00004945 	.word	0x00004945

00004dd0 <__libc_init_array>:
    4dd0:	b570      	push	{r4, r5, r6, lr}
    4dd2:	4e0d      	ldr	r6, [pc, #52]	; (4e08 <__libc_init_array+0x38>)
    4dd4:	4c0d      	ldr	r4, [pc, #52]	; (4e0c <__libc_init_array+0x3c>)
    4dd6:	1ba4      	subs	r4, r4, r6
    4dd8:	10a4      	asrs	r4, r4, #2
    4dda:	2500      	movs	r5, #0
    4ddc:	42a5      	cmp	r5, r4
    4dde:	d109      	bne.n	4df4 <__libc_init_array+0x24>
    4de0:	4e0b      	ldr	r6, [pc, #44]	; (4e10 <__libc_init_array+0x40>)
    4de2:	4c0c      	ldr	r4, [pc, #48]	; (4e14 <__libc_init_array+0x44>)
    4de4:	f000 f818 	bl	4e18 <_init>
    4de8:	1ba4      	subs	r4, r4, r6
    4dea:	10a4      	asrs	r4, r4, #2
    4dec:	2500      	movs	r5, #0
    4dee:	42a5      	cmp	r5, r4
    4df0:	d105      	bne.n	4dfe <__libc_init_array+0x2e>
    4df2:	bd70      	pop	{r4, r5, r6, pc}
    4df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4df8:	4798      	blx	r3
    4dfa:	3501      	adds	r5, #1
    4dfc:	e7ee      	b.n	4ddc <__libc_init_array+0xc>
    4dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4e02:	4798      	blx	r3
    4e04:	3501      	adds	r5, #1
    4e06:	e7f2      	b.n	4dee <__libc_init_array+0x1e>
    4e08:	00004e24 	.word	0x00004e24
    4e0c:	00004e24 	.word	0x00004e24
    4e10:	00004e24 	.word	0x00004e24
    4e14:	00004e28 	.word	0x00004e28

00004e18 <_init>:
    4e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e1a:	bf00      	nop
    4e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e1e:	bc08      	pop	{r3}
    4e20:	469e      	mov	lr, r3
    4e22:	4770      	bx	lr

00004e24 <__init_array_start>:
    4e24:	00004289 	.word	0x00004289

00004e28 <_fini>:
    4e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e2a:	bf00      	nop
    4e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e2e:	bc08      	pop	{r3}
    4e30:	469e      	mov	lr, r3
    4e32:	4770      	bx	lr

00004e34 <__fini_array_start>:
    4e34:	00004265 	.word	0x00004265
